# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild_ARM64

on:
  push:
    branches: [ "master" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./Builds/MsVc2022.win/OdbcFb.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

  INNO_SETUP_PATH: 'C:\Program Files (x86)\Inno Setup 6'

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-11-arm

    steps:
    - uses: actions/checkout@v3

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: arm64

    - name: Install html-help-workshop, sed, innosetup
      run: |
        choco install html-help-workshop
        choco install sed
        choco install innosetup

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Stub
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        #cd "C:\Program Files (x86)\"
        #dir
        env

    - name: Build win32
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=Win32 ${{env.SOLUTION_FILE_PATH}}

    - name: Build x64
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Build InnoSetup installers
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd Install\Win32
        dir
        ./MakePackage.bat
        ./MakePackage.bat WIN32

    - name: VirusTotal Scan
      uses: crazy-max/ghaction-virustotal@v4
      id: virustotal_scan
      with:
          #vt_api_key: ${{ secrets.VT_API_KEY }}
          vt_api_key: effc35cbb3eb35975d5cf74eee8b75a1a1b12b6af0d66ed2a65cba48becaecc0
          files: |
            ./Install/Win32/install_image/*_Win32.exe
            ./Install/Win32/install_image/*_x64.exe

    - name: Upload artefacts 
      run: |
          echo "${{ steps.virustotal_scan.outputs.analysis }}" > ./Install/Win32/install_image/VirusTotalScan.txt
          
    - uses: actions/upload-artifact@v4
      id: upload_step1
      with:
          name: VirusTotalScan
          path: ./Install/Win32/install_image/VirusTotalScan.txt

    - uses: actions/upload-artifact@v4
      id: upload_step2
      with:
          name: Win32Installer
          path: ./Install/Win32/install_image/*_Win32.exe

    - uses: actions/upload-artifact@v4
      id: upload_step3
      with:
          name: x64Installer
          path: ./Install/Win32/install_image/*_x64.exe
          
    - name: Upload results
      run: |
        echo 'VirusTotalScan: Artifact ID is ${{ steps.upload_step1.outputs.artifact-id }}, URL is ${{ steps.upload_step1.outputs.artifact-url }}'
        echo 'Win32Installer: Artifact ID is ${{ steps.upload_step2.outputs.artifact-id }}, URL is ${{ steps.upload_step2.outputs.artifact-url }}'
        echo 'x64Installer:   Artifact ID is ${{ steps.upload_step3.outputs.artifact-id }}, URL is ${{ steps.upload_step3.outputs.artifact-url }}'
     
