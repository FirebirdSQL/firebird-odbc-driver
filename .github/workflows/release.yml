name: release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read

jobs:
  # Stage 1: Build Windows binaries (matrix strategy)
  build-windows:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86
            platform: Win32
            runner: windows-latest
          - arch: x64
            platform: x64
            runner: windows-latest
          # Uncomment when ARM64 runners are available
          # - arch: arm64
          #   platform: ARM64
          #   runner: windows-11-arm
    steps:
    - uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      run: nuget restore ./Builds/MsVc2022.win/OdbcFb.sln

    - name: Build ${{ matrix.arch }}
      run: |
        msbuild /m /p:Configuration=Release /p:Platform=${{ matrix.platform }} ./Builds/MsVc2022.win/OdbcFb.sln

    - name: Upload ${{ matrix.arch }} binaries
      uses: actions/upload-artifact@v4
      with:
        name: firebird-odbc-win-${{ matrix.arch }}-binaries
        path: |
          Builds/MsVc2022.win/${{ matrix.platform }}/Release/*.dll
          Builds/MsVc2022.win/${{ matrix.platform }}/Release/*.lib
          Builds/MsVc2022.win/${{ matrix.platform }}/Release/*.pdb
        if-no-files-found: error

  # Stage 2: Package Windows binaries into zip files
  package-windows:
    needs: build-windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x64] # Add arm64 when ready
    steps:
    - uses: actions/checkout@v4

    - name: Download ${{ matrix.arch }} binaries
      uses: actions/download-artifact@v4
      with:
        name: firebird-odbc-win-${{ matrix.arch }}-binaries
        path: binaries/

    - name: Create ${{ matrix.arch }} package
      run: |
        # Create package directory
        New-Item -ItemType Directory -Force -Path "package"
        
        # Copy binaries
        Copy-Item "binaries/*" "package/" -Recurse
        
        # Copy documentation
        Copy-Item "Install/Win32/Readme.txt" "package/"
        Copy-Item "Install/IDPLicense.txt" "package/"
        Copy-Item "README.md" "package/"
        
        # Create zip file
        Compress-Archive -Path "package/*" -DestinationPath "firebird-odbc-windows-${{ matrix.arch }}-${{ github.ref_name }}.zip"

    - name: Upload ${{ matrix.arch }} package
      uses: actions/upload-artifact@v4
      with:
        name: firebird-odbc-windows-${{ matrix.arch }}
        path: firebird-odbc-windows-${{ matrix.arch }}-${{ github.ref_name }}.zip

  # Stage 3: Create Windows installers
  installer-windows:
    needs: build-windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86
            platform: Win32
            make_param: WIN32
            installer_pattern: "*_Win32.exe"
          - arch: x64
            platform: x64
            make_param: ""
            installer_pattern: "*_x64.exe"
            needs_x86: true
    steps:
    - uses: actions/checkout@v4

    - name: Install tools
      run: |
        choco install --no-progress --yes html-help-workshop
        choco install --no-progress --yes sed
        choco install --no-progress --yes innosetup

    - name: Download ${{ matrix.arch }} binaries
      uses: actions/download-artifact@v4
      with:
        name: firebird-odbc-win-${{ matrix.arch }}-binaries
        path: Builds/MsVc2022.win/${{ matrix.platform }}/Release/

    - name: Download x86 binaries (for x64 dual-arch installer)
      if: matrix.needs_x86
      uses: actions/download-artifact@v4
      with:
        name: firebird-odbc-win-x86-binaries
        path: Builds/MsVc2022.win/Win32/Release/

    - name: Debug - List downloaded files
      run: |
        echo "=== Downloaded ${{ matrix.arch }} binaries ==="
        Get-ChildItem -Recurse Builds/MsVc2022.win/${{ matrix.platform }}/Release/ | Format-Table Name, FullName
        
        if ("${{ matrix.needs_x86 }}" -eq "true") {
          echo "=== Downloaded x86 binaries ==="
          Get-ChildItem -Recurse Builds/MsVc2022.win/Win32/Release/ | Format-Table Name, FullName
        }

    - name: Create ${{ matrix.arch }} installer
      env:
        INNO_SETUP_PATH: C:\Program Files (x86)\Inno Setup 6
      run: |
        # Verify InnoSetup is accessible
        Write-Host "=== Verifying InnoSetup installation ==="
        if (Get-Command iscc -ErrorAction SilentlyContinue) {
          $isccPath = Get-Command iscc | Select-Object -ExpandProperty Source
          Write-Host "✅ iscc.exe found: $isccPath"
        } else {
          Write-Host "❌ iscc.exe not found in PATH"
          exit 1
        }
        
        # Create installer
        cd Install\Win32
        .\MakePackage.bat ${{ matrix.make_param }}
        
        # Rename the output file to our desired name
        $originalFile = Get-ChildItem install_image\${{ matrix.installer_pattern }} | Select-Object -First 1
        if ($originalFile) {
          $newName = "firebird-odbc-windows-${{ matrix.arch }}-installer-${{ github.ref_name }}.exe"
          Rename-Item $originalFile.FullName $newName
          Write-Host "✅ Renamed installer to: $newName"
        } else {
          Write-Host "❌ No ${{ matrix.arch }} installer file found"
          exit 1
        }

    - name: Upload ${{ matrix.arch }} installer
      uses: actions/upload-artifact@v4
      with:
        name: firebird-odbc-windows-${{ matrix.arch }}-installer
        path: Install/Win32/install_image/firebird-odbc-windows-${{ matrix.arch }}-installer-${{ github.ref_name }}.exe
        if-no-files-found: error

  build-linux:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-22.04-arm
    steps:
    - uses: actions/checkout@v4

    - name: Build Linux ${{ matrix.arch }}
      run: |
        # Install dependencies (unixodbc)
        sudo apt-get update -y
        sudo apt-get install -y unixodbc unixodbc-dev build-essential

        # Build ODBC driver
        cd Builds/Gcc.lin
        cp makefile.linux makefile
        make

        # Package with documentation
        mkdir -p firebird-odbc-linux-${{ matrix.arch }}
        cp Release_*/libOdbcFb.so firebird-odbc-linux-${{ matrix.arch }}/
        cp ../../Install/IDPLicense.txt firebird-odbc-linux-${{ matrix.arch }}/
        cp ../../README.md firebird-odbc-linux-${{ matrix.arch }}/
        tar -czf firebird-odbc-linux-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz firebird-odbc-linux-${{ matrix.arch }}/

    - name: Upload Linux ${{ matrix.arch }} Artifact
      uses: actions/upload-artifact@v4
      with:
        name: firebird-odbc-linux-${{ matrix.arch }}
        path: Builds/Gcc.lin/firebird-odbc-linux-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz

  create-release:
    needs: [
      package-windows,
      installer-windows,
      build-linux
    ]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to create releases
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: List downloaded artifacts
      run: |
        echo "=== Downloaded artifacts ==="
        find . -type f -name "*.zip" -o -name "*.exe" -o -name "*.tar.gz" | sort

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          firebird-odbc-windows-x86-${{ github.ref_name }}.zip
          firebird-odbc-windows-x64-${{ github.ref_name }}.zip
          firebird-odbc-linux-x64-${{ github.ref_name }}.tar.gz
          firebird-odbc-linux-arm64-${{ github.ref_name }}.tar.gz
          firebird-odbc-windows-x86-installer-${{ github.ref_name }}.exe
          firebird-odbc-windows-x64-installer-${{ github.ref_name }}.exe
        draft: false
        prerelease: false
