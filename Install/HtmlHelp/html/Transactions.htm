<!--  
 *     The contents of this file are subject to the Initial 
 *     Developer's Public License Version 1.0 (the "License"); 
 *     you may not use this file except in compliance with the 
 *     License. You may obtain a copy of the License at 
 *     http://www.ibphoenix.com/main.nfs?a=ibphoenix&page=ibp_idpl
 *
 *     Software distributed under the License is distributed on 
 *     an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
 *     express or implied.  See the License for the specific 
 *     language governing rights and limitations under the License.
 *
 *
 *  The Original Code was created by Vladimir Tsvigun for IBPhoenix.
 *
 *  Copyright (c) 2004 Vladimir Tsvigun
 *  All Rights Reserved.
 *
 *  This translation and editing was done by Paul Beach of IBPhoenix
 *
-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Transactions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<P><A NAME="hid_transactions"></A><h1>Transactions</h1></P>

<P>Firebird supports the following transaction isolation levels:</P>

<P>&nbsp;&nbsp;&nbsp;1 (read committed, the default),<BR>
&nbsp;&nbsp;&nbsp;3 (serializable)<BR>
&nbsp;&nbsp;&nbsp;4 (versioning). </P>

<P>Firebird implements row-level locking in all cases.</P>

<P>Firebird performs optimistic locking. Your transaction does  not attempt to lock 
a record until you issue an update operation that affects that record.  This means
that it is possible, though rare, for your update to fail because  another client has
locked the record, even if you started your transaction before that other client.</P>

<P>Firebird  uses  a unique versioning engine to achieve a granularity finer than that
provided  by  traditional  row-level  locking. The versioning engine  allows  any
number  of  clients  to  read a consistent  copy  of any given record, even if at the
same time another client  is  updating  that  same  row. Readers and writers never
block one  another,  and  the  Firebird  database  engine  maintains   these  record
versions transparently as far as the client is concerned.</P>

<P>Support is  also  provided  for  two  phase  commit  transactions  across  different
Firebird databases. There is a restriction that only up to 10 databases can be  used
simultaneously in a two phase commit transaction. If you should need to use a two
phase commit transaction then it is it is necessary to use the following call: </P>

<UL><B>SQLSetConnectAttr (connection, 4000, (void*) TRUE, 0);</B></UL>

<P>This call creates a common connection, 
to cancel the common connection: </P>

<UL><B>SQLSetConnectAttr (connection, 4000, (void*) FALSE, 0); </B></UL>

<P>Firebird ODBC by default uses one transaction per connection, however programatically
you  can  use  a  more  flexible  transaction  stucture. For example you can use multiple
transactions within one connection, where one connection, can simultaneously be using
a number of read/write transactions. It is also possible to use independent connections to
different Firebird databases to carry out a two phase commit transaction across multiple
Databases.</P>

<P>For more details of how to do this and for other advanced topics please look at the examples.</P>

</BODY>
</HTML>
